<?php
/**
 * DashboardsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * API Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developer@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DashboardsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DashboardsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation dashboardCRC
     *
     * Retrieve CRC Port Usage
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function dashboardCRC($from, $to)
    {
        list($response) = $this->dashboardCRCWithHttpInfo($from, $to);
        return $response;
    }

    /**
     * Operation dashboardCRCWithHttpInfo
     *
     * Retrieve CRC Port Usage
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardCRCWithHttpInfo($from, $to)
    {
        $returnType = 'object';
        $request = $this->dashboardCRCRequest($from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardCRCAsync
     *
     * Retrieve CRC Port Usage
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardCRCAsync($from, $to)
    {
        return $this->dashboardCRCAsyncWithHttpInfo($from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardCRCAsyncWithHttpInfo
     *
     * Retrieve CRC Port Usage
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardCRCAsyncWithHttpInfo($from, $to)
    {
        $returnType = 'object';
        $request = $this->dashboardCRCRequest($from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardCRC'
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardCRCRequest($from, $to)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling dashboardCRC'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling dashboardCRC'
            );
        }

        $resourcePath = '/metrics/crc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardIM
     *
     * Retrieve IM
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function dashboardIM($from, $to, $page_size = '30', $next_page_token = null)
    {
        list($response) = $this->dashboardIMWithHttpInfo($from, $to, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardIMWithHttpInfo
     *
     * Retrieve IM
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardIMWithHttpInfo($from, $to, $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardIMRequest($from, $to, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardIMAsync
     *
     * Retrieve IM
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardIMAsync($from, $to, $page_size = '30', $next_page_token = null)
    {
        return $this->dashboardIMAsyncWithHttpInfo($from, $to, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardIMAsyncWithHttpInfo
     *
     * Retrieve IM
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardIMAsyncWithHttpInfo($from, $to, $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardIMRequest($from, $to, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardIM'
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardIMRequest($from, $to, $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling dashboardIM'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling dashboardIM'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardIM, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/im';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardMeetingDetail
     *
     * Retrieve meeting detail
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MeetingMetric
     */
    public function dashboardMeetingDetail($meeting_id, $type = 'live')
    {
        list($response) = $this->dashboardMeetingDetailWithHttpInfo($meeting_id, $type);
        return $response;
    }

    /**
     * Operation dashboardMeetingDetailWithHttpInfo
     *
     * Retrieve meeting detail
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MeetingMetric, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardMeetingDetailWithHttpInfo($meeting_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\MeetingMetric';
        $request = $this->dashboardMeetingDetailRequest($meeting_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MeetingMetric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardMeetingDetailAsync
     *
     * Retrieve meeting detail
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingDetailAsync($meeting_id, $type = 'live')
    {
        return $this->dashboardMeetingDetailAsyncWithHttpInfo($meeting_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardMeetingDetailAsyncWithHttpInfo
     *
     * Retrieve meeting detail
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingDetailAsyncWithHttpInfo($meeting_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\MeetingMetric';
        $request = $this->dashboardMeetingDetailRequest($meeting_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardMeetingDetail'
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardMeetingDetailRequest($meeting_id, $type = 'live')
    {
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null || (is_array($meeting_id) && count($meeting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meeting_id when calling dashboardMeetingDetail'
            );
        }

        $resourcePath = '/metrics/meetings/{meetingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'meetingId' . '}',
                ObjectSerializer::toPathValue($meeting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardMeetingParticipantQOS
     *
     * Retrieve meeting participant QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\QOSParticipant
     */
    public function dashboardMeetingParticipantQOS($meeting_id, $participant_id, $type = 'live')
    {
        list($response) = $this->dashboardMeetingParticipantQOSWithHttpInfo($meeting_id, $participant_id, $type);
        return $response;
    }

    /**
     * Operation dashboardMeetingParticipantQOSWithHttpInfo
     *
     * Retrieve meeting participant QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\QOSParticipant, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardMeetingParticipantQOSWithHttpInfo($meeting_id, $participant_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\QOSParticipant';
        $request = $this->dashboardMeetingParticipantQOSRequest($meeting_id, $participant_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\QOSParticipant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardMeetingParticipantQOSAsync
     *
     * Retrieve meeting participant QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantQOSAsync($meeting_id, $participant_id, $type = 'live')
    {
        return $this->dashboardMeetingParticipantQOSAsyncWithHttpInfo($meeting_id, $participant_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardMeetingParticipantQOSAsyncWithHttpInfo
     *
     * Retrieve meeting participant QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantQOSAsyncWithHttpInfo($meeting_id, $participant_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\QOSParticipant';
        $request = $this->dashboardMeetingParticipantQOSRequest($meeting_id, $participant_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardMeetingParticipantQOS'
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The meeting type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardMeetingParticipantQOSRequest($meeting_id, $participant_id, $type = 'live')
    {
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null || (is_array($meeting_id) && count($meeting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meeting_id when calling dashboardMeetingParticipantQOS'
            );
        }
        // verify the required parameter 'participant_id' is set
        if ($participant_id === null || (is_array($participant_id) && count($participant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $participant_id when calling dashboardMeetingParticipantQOS'
            );
        }

        $resourcePath = '/metrics/meetings/{meetingId}/participants/{participantId}/qos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'meetingId' . '}',
                ObjectSerializer::toPathValue($meeting_id),
                $resourcePath
            );
        }
        // path params
        if ($participant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'participantId' . '}',
                ObjectSerializer::toPathValue($participant_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardMeetingParticipantShare
     *
     * Retrieve sharing/recording details of meeting participant
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function dashboardMeetingParticipantShare($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        list($response) = $this->dashboardMeetingParticipantShareWithHttpInfo($meeting_id, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardMeetingParticipantShareWithHttpInfo
     *
     * Retrieve sharing/recording details of meeting participant
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardMeetingParticipantShareWithHttpInfo($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardMeetingParticipantShareRequest($meeting_id, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardMeetingParticipantShareAsync
     *
     * Retrieve sharing/recording details of meeting participant
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantShareAsync($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        return $this->dashboardMeetingParticipantShareAsyncWithHttpInfo($meeting_id, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardMeetingParticipantShareAsyncWithHttpInfo
     *
     * Retrieve sharing/recording details of meeting participant
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantShareAsyncWithHttpInfo($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardMeetingParticipantShareRequest($meeting_id, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardMeetingParticipantShare'
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardMeetingParticipantShareRequest($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null || (is_array($meeting_id) && count($meeting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meeting_id when calling dashboardMeetingParticipantShare'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardMeetingParticipantShare, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/meetings/{meetingId}/participants/sharing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }

        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'meetingId' . '}',
                ObjectSerializer::toPathValue($meeting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardMeetingParticipants
     *
     * Retrieve meeting participants
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function dashboardMeetingParticipants($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        list($response) = $this->dashboardMeetingParticipantsWithHttpInfo($meeting_id, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardMeetingParticipantsWithHttpInfo
     *
     * Retrieve meeting participants
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardMeetingParticipantsWithHttpInfo($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardMeetingParticipantsRequest($meeting_id, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardMeetingParticipantsAsync
     *
     * Retrieve meeting participants
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantsAsync($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        return $this->dashboardMeetingParticipantsAsyncWithHttpInfo($meeting_id, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardMeetingParticipantsAsyncWithHttpInfo
     *
     * Retrieve meeting participants
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantsAsyncWithHttpInfo($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardMeetingParticipantsRequest($meeting_id, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardMeetingParticipants'
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardMeetingParticipantsRequest($meeting_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null || (is_array($meeting_id) && count($meeting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meeting_id when calling dashboardMeetingParticipants'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardMeetingParticipants, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/meetings/{meetingId}/participants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }

        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'meetingId' . '}',
                ObjectSerializer::toPathValue($meeting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardMeetingParticipantsQOS
     *
     * List meeting participants QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\QOSParticipantList
     */
    public function dashboardMeetingParticipantsQOS($meeting_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        list($response) = $this->dashboardMeetingParticipantsQOSWithHttpInfo($meeting_id, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardMeetingParticipantsQOSWithHttpInfo
     *
     * List meeting participants QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\QOSParticipantList, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardMeetingParticipantsQOSWithHttpInfo($meeting_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\QOSParticipantList';
        $request = $this->dashboardMeetingParticipantsQOSRequest($meeting_id, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\QOSParticipantList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardMeetingParticipantsQOSAsync
     *
     * List meeting participants QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantsQOSAsync($meeting_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        return $this->dashboardMeetingParticipantsQOSAsyncWithHttpInfo($meeting_id, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardMeetingParticipantsQOSAsyncWithHttpInfo
     *
     * List meeting participants QOS
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingParticipantsQOSAsyncWithHttpInfo($meeting_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\QOSParticipantList';
        $request = $this->dashboardMeetingParticipantsQOSRequest($meeting_id, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardMeetingParticipantsQOS'
     *
     * @param  string $meeting_id The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance. (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardMeetingParticipantsQOSRequest($meeting_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null || (is_array($meeting_id) && count($meeting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meeting_id when calling dashboardMeetingParticipantsQOS'
            );
        }
        if ($page_size !== null && $page_size > 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardMeetingParticipantsQOS, must be smaller than or equal to 10.');
        }


        $resourcePath = '/metrics/meetings/{meetingId}/participants/qos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }

        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'meetingId' . '}',
                ObjectSerializer::toPathValue($meeting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardMeetings
     *
     * List meetings
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function dashboardMeetings($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        list($response) = $this->dashboardMeetingsWithHttpInfo($from, $to, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardMeetingsWithHttpInfo
     *
     * List meetings
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardMeetingsWithHttpInfo($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardMeetingsRequest($from, $to, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardMeetingsAsync
     *
     * List meetings
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingsAsync($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        return $this->dashboardMeetingsAsyncWithHttpInfo($from, $to, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardMeetingsAsyncWithHttpInfo
     *
     * List meetings
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardMeetingsAsyncWithHttpInfo($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardMeetingsRequest($from, $to, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardMeetings'
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The meeting type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardMeetingsRequest($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling dashboardMeetings'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling dashboardMeetings'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardMeetings, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/meetings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardWebinarDetail
     *
     * Retrieve webinar detail
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebinarMetric
     */
    public function dashboardWebinarDetail($webinar_id, $type = 'live')
    {
        list($response) = $this->dashboardWebinarDetailWithHttpInfo($webinar_id, $type);
        return $response;
    }

    /**
     * Operation dashboardWebinarDetailWithHttpInfo
     *
     * Retrieve webinar detail
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebinarMetric, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardWebinarDetailWithHttpInfo($webinar_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\WebinarMetric';
        $request = $this->dashboardWebinarDetailRequest($webinar_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebinarMetric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardWebinarDetailAsync
     *
     * Retrieve webinar detail
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarDetailAsync($webinar_id, $type = 'live')
    {
        return $this->dashboardWebinarDetailAsyncWithHttpInfo($webinar_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardWebinarDetailAsyncWithHttpInfo
     *
     * Retrieve webinar detail
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarDetailAsyncWithHttpInfo($webinar_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\WebinarMetric';
        $request = $this->dashboardWebinarDetailRequest($webinar_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardWebinarDetail'
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardWebinarDetailRequest($webinar_id, $type = 'live')
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling dashboardWebinarDetail'
            );
        }

        $resourcePath = '/metrics/webinars/{webinarId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardWebinarParticipantQOS
     *
     * Retrieve webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\QOSParticipant
     */
    public function dashboardWebinarParticipantQOS($webinar_id, $participant_id, $type = 'live')
    {
        list($response) = $this->dashboardWebinarParticipantQOSWithHttpInfo($webinar_id, $participant_id, $type);
        return $response;
    }

    /**
     * Operation dashboardWebinarParticipantQOSWithHttpInfo
     *
     * Retrieve webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\QOSParticipant, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardWebinarParticipantQOSWithHttpInfo($webinar_id, $participant_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\QOSParticipant';
        $request = $this->dashboardWebinarParticipantQOSRequest($webinar_id, $participant_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\QOSParticipant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardWebinarParticipantQOSAsync
     *
     * Retrieve webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantQOSAsync($webinar_id, $participant_id, $type = 'live')
    {
        return $this->dashboardWebinarParticipantQOSAsyncWithHttpInfo($webinar_id, $participant_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardWebinarParticipantQOSAsyncWithHttpInfo
     *
     * Retrieve webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantQOSAsyncWithHttpInfo($webinar_id, $participant_id, $type = 'live')
    {
        $returnType = '\Swagger\Client\Model\QOSParticipant';
        $request = $this->dashboardWebinarParticipantQOSRequest($webinar_id, $participant_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardWebinarParticipantQOS'
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $participant_id Participant ID (required)
     * @param  string $type The webinar type (optional, default to live)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardWebinarParticipantQOSRequest($webinar_id, $participant_id, $type = 'live')
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling dashboardWebinarParticipantQOS'
            );
        }
        // verify the required parameter 'participant_id' is set
        if ($participant_id === null || (is_array($participant_id) && count($participant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $participant_id when calling dashboardWebinarParticipantQOS'
            );
        }

        $resourcePath = '/metrics/webinars/{webinarId}/participants/{participantId}/qos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }
        // path params
        if ($participant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'participantId' . '}',
                ObjectSerializer::toPathValue($participant_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardWebinarParticipantShare
     *
     * Retrieve sharing/recording details of webinar participant
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function dashboardWebinarParticipantShare($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        list($response) = $this->dashboardWebinarParticipantShareWithHttpInfo($webinar_id, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardWebinarParticipantShareWithHttpInfo
     *
     * Retrieve sharing/recording details of webinar participant
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardWebinarParticipantShareWithHttpInfo($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardWebinarParticipantShareRequest($webinar_id, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardWebinarParticipantShareAsync
     *
     * Retrieve sharing/recording details of webinar participant
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantShareAsync($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        return $this->dashboardWebinarParticipantShareAsyncWithHttpInfo($webinar_id, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardWebinarParticipantShareAsyncWithHttpInfo
     *
     * Retrieve sharing/recording details of webinar participant
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantShareAsyncWithHttpInfo($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardWebinarParticipantShareRequest($webinar_id, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardWebinarParticipantShare'
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardWebinarParticipantShareRequest($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling dashboardWebinarParticipantShare'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardWebinarParticipantShare, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/webinars/{webinarId}/participants/sharing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardWebinarParticipants
     *
     * Retrieve webinar participants
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function dashboardWebinarParticipants($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        list($response) = $this->dashboardWebinarParticipantsWithHttpInfo($webinar_id, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardWebinarParticipantsWithHttpInfo
     *
     * Retrieve webinar participants
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardWebinarParticipantsWithHttpInfo($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardWebinarParticipantsRequest($webinar_id, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardWebinarParticipantsAsync
     *
     * Retrieve webinar participants
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantsAsync($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        return $this->dashboardWebinarParticipantsAsyncWithHttpInfo($webinar_id, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardWebinarParticipantsAsyncWithHttpInfo
     *
     * Retrieve webinar participants
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantsAsyncWithHttpInfo($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardWebinarParticipantsRequest($webinar_id, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardWebinarParticipants'
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardWebinarParticipantsRequest($webinar_id, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling dashboardWebinarParticipants'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardWebinarParticipants, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/webinars/{webinarId}/participants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardWebinarParticipantsQOS
     *
     * List webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\QOSParticipantList
     */
    public function dashboardWebinarParticipantsQOS($webinar_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        list($response) = $this->dashboardWebinarParticipantsQOSWithHttpInfo($webinar_id, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardWebinarParticipantsQOSWithHttpInfo
     *
     * List webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\QOSParticipantList, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardWebinarParticipantsQOSWithHttpInfo($webinar_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\QOSParticipantList';
        $request = $this->dashboardWebinarParticipantsQOSRequest($webinar_id, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\QOSParticipantList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardWebinarParticipantsQOSAsync
     *
     * List webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantsQOSAsync($webinar_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        return $this->dashboardWebinarParticipantsQOSAsyncWithHttpInfo($webinar_id, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardWebinarParticipantsQOSAsyncWithHttpInfo
     *
     * List webinar participant QOS
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarParticipantsQOSAsyncWithHttpInfo($webinar_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\QOSParticipantList';
        $request = $this->dashboardWebinarParticipantsQOSRequest($webinar_id, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardWebinarParticipantsQOS'
     *
     * @param  string $webinar_id The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance. (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size Number of items returned per page (optional, default to 1)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardWebinarParticipantsQOSRequest($webinar_id, $type = 'live', $page_size = '1', $next_page_token = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling dashboardWebinarParticipantsQOS'
            );
        }
        if ($page_size !== null && $page_size > 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardWebinarParticipantsQOS, must be smaller than or equal to 10.');
        }


        $resourcePath = '/metrics/webinars/{webinarId}/participants/qos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardWebinars
     *
     * List webinars
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function dashboardWebinars($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        list($response) = $this->dashboardWebinarsWithHttpInfo($from, $to, $type, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation dashboardWebinarsWithHttpInfo
     *
     * List webinars
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardWebinarsWithHttpInfo($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardWebinarsRequest($from, $to, $type, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardWebinarsAsync
     *
     * List webinars
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarsAsync($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        return $this->dashboardWebinarsAsyncWithHttpInfo($from, $to, $type, $page_size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardWebinarsAsyncWithHttpInfo
     *
     * List webinars
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardWebinarsAsyncWithHttpInfo($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->dashboardWebinarsRequest($from, $to, $type, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardWebinars'
     *
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  string $type The webinar type (optional, default to live)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  string $next_page_token Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardWebinarsRequest($from, $to, $type = 'live', $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling dashboardWebinars'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling dashboardWebinars'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardWebinars, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/webinars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardZoomRoom
     *
     * Retrieve Zoom Room
     *
     * @param  string $zoomroom_id The Zoom Room ID (required)
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2006
     */
    public function dashboardZoomRoom($zoomroom_id, $from, $to, $page_size = '30', $page_number = '1')
    {
        list($response) = $this->dashboardZoomRoomWithHttpInfo($zoomroom_id, $from, $to, $page_size, $page_number);
        return $response;
    }

    /**
     * Operation dashboardZoomRoomWithHttpInfo
     *
     * Retrieve Zoom Room
     *
     * @param  string $zoomroom_id The Zoom Room ID (required)
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardZoomRoomWithHttpInfo($zoomroom_id, $from, $to, $page_size = '30', $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->dashboardZoomRoomRequest($zoomroom_id, $from, $to, $page_size, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardZoomRoomAsync
     *
     * Retrieve Zoom Room
     *
     * @param  string $zoomroom_id The Zoom Room ID (required)
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardZoomRoomAsync($zoomroom_id, $from, $to, $page_size = '30', $page_number = '1')
    {
        return $this->dashboardZoomRoomAsyncWithHttpInfo($zoomroom_id, $from, $to, $page_size, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardZoomRoomAsyncWithHttpInfo
     *
     * Retrieve Zoom Room
     *
     * @param  string $zoomroom_id The Zoom Room ID (required)
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardZoomRoomAsyncWithHttpInfo($zoomroom_id, $from, $to, $page_size = '30', $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->dashboardZoomRoomRequest($zoomroom_id, $from, $to, $page_size, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardZoomRoom'
     *
     * @param  string $zoomroom_id The Zoom Room ID (required)
     * @param  \DateTime $from Start Date (required)
     * @param  \DateTime $to End Date (required)
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardZoomRoomRequest($zoomroom_id, $from, $to, $page_size = '30', $page_number = '1')
    {
        // verify the required parameter 'zoomroom_id' is set
        if ($zoomroom_id === null || (is_array($zoomroom_id) && count($zoomroom_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoomroom_id when calling dashboardZoomRoom'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling dashboardZoomRoom'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling dashboardZoomRoom'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardZoomRoom, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/zoomrooms/{zoomroomId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['page_number'] = ObjectSerializer::toQueryValue($page_number);
        }

        // path params
        if ($zoomroom_id !== null) {
            $resourcePath = str_replace(
                '{' . 'zoomroomId' . '}',
                ObjectSerializer::toPathValue($zoomroom_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dashboardZoomRooms
     *
     * List Zoom Rooms
     *
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ZoomRoomList
     */
    public function dashboardZoomRooms($page_size = '30', $page_number = '1')
    {
        list($response) = $this->dashboardZoomRoomsWithHttpInfo($page_size, $page_number);
        return $response;
    }

    /**
     * Operation dashboardZoomRoomsWithHttpInfo
     *
     * List Zoom Rooms
     *
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ZoomRoomList, HTTP status code, HTTP response headers (array of strings)
     */
    public function dashboardZoomRoomsWithHttpInfo($page_size = '30', $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\ZoomRoomList';
        $request = $this->dashboardZoomRoomsRequest($page_size, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ZoomRoomList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dashboardZoomRoomsAsync
     *
     * List Zoom Rooms
     *
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardZoomRoomsAsync($page_size = '30', $page_number = '1')
    {
        return $this->dashboardZoomRoomsAsyncWithHttpInfo($page_size, $page_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dashboardZoomRoomsAsyncWithHttpInfo
     *
     * List Zoom Rooms
     *
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dashboardZoomRoomsAsyncWithHttpInfo($page_size = '30', $page_number = '1')
    {
        $returnType = '\Swagger\Client\Model\ZoomRoomList';
        $request = $this->dashboardZoomRoomsRequest($page_size, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dashboardZoomRooms'
     *
     * @param  int $page_size The number of records returned within a single API call (optional, default to 30)
     * @param  int $page_number Current page number of returned records (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dashboardZoomRoomsRequest($page_size = '30', $page_number = '1')
    {
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DashboardsApi.dashboardZoomRooms, must be smaller than or equal to 300.');
        }


        $resourcePath = '/metrics/zoomrooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['page_number'] = ObjectSerializer::toQueryValue($page_number);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
