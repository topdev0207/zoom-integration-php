<?php
/**
 * TSP
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * API Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developer@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TSP Class Doc Comment
 *
 * @category Class
 * @description List of TSP Accounts
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TSP implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TSP';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conference_code' => 'string',
        'leader_pin' => 'string',
        'dial_in_numbers' => '\Swagger\Client\Model\TSPDialInNumbers[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conference_code' => null,
        'leader_pin' => null,
        'dial_in_numbers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conference_code' => 'conference_code',
        'leader_pin' => 'leader_pin',
        'dial_in_numbers' => 'dial_in_numbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conference_code' => 'setConferenceCode',
        'leader_pin' => 'setLeaderPin',
        'dial_in_numbers' => 'setDialInNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conference_code' => 'getConferenceCode',
        'leader_pin' => 'getLeaderPin',
        'dial_in_numbers' => 'getDialInNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conference_code'] = isset($data['conference_code']) ? $data['conference_code'] : null;
        $this->container['leader_pin'] = isset($data['leader_pin']) ? $data['leader_pin'] : null;
        $this->container['dial_in_numbers'] = isset($data['dial_in_numbers']) ? $data['dial_in_numbers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['conference_code'] === null) {
            $invalidProperties[] = "'conference_code' can't be null";
        }
        if ((mb_strlen($this->container['conference_code']) > 16)) {
            $invalidProperties[] = "invalid value for 'conference_code', the character length must be smaller than or equal to 16.";
        }

        if ((mb_strlen($this->container['conference_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'conference_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['leader_pin'] === null) {
            $invalidProperties[] = "'leader_pin' can't be null";
        }
        if ((mb_strlen($this->container['leader_pin']) > 16)) {
            $invalidProperties[] = "invalid value for 'leader_pin', the character length must be smaller than or equal to 16.";
        }

        if ((mb_strlen($this->container['leader_pin']) < 1)) {
            $invalidProperties[] = "invalid value for 'leader_pin', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conference_code
     *
     * @return string
     */
    public function getConferenceCode()
    {
        return $this->container['conference_code'];
    }

    /**
     * Sets conference_code
     *
     * @param string $conference_code Conference code, numeric value, length is less than 16.
     *
     * @return $this
     */
    public function setConferenceCode($conference_code)
    {
        if ((mb_strlen($conference_code) > 16)) {
            throw new \InvalidArgumentException('invalid length for $conference_code when calling TSP., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($conference_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $conference_code when calling TSP., must be bigger than or equal to 1.');
        }

        $this->container['conference_code'] = $conference_code;

        return $this;
    }

    /**
     * Gets leader_pin
     *
     * @return string
     */
    public function getLeaderPin()
    {
        return $this->container['leader_pin'];
    }

    /**
     * Sets leader_pin
     *
     * @param string $leader_pin Leader PIN, numeric value, length is less than 16.
     *
     * @return $this
     */
    public function setLeaderPin($leader_pin)
    {
        if ((mb_strlen($leader_pin) > 16)) {
            throw new \InvalidArgumentException('invalid length for $leader_pin when calling TSP., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($leader_pin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $leader_pin when calling TSP., must be bigger than or equal to 1.');
        }

        $this->container['leader_pin'] = $leader_pin;

        return $this;
    }

    /**
     * Gets dial_in_numbers
     *
     * @return \Swagger\Client\Model\TSPDialInNumbers[]
     */
    public function getDialInNumbers()
    {
        return $this->container['dial_in_numbers'];
    }

    /**
     * Sets dial_in_numbers
     *
     * @param \Swagger\Client\Model\TSPDialInNumbers[] $dial_in_numbers List of Dial In Numbers
     *
     * @return $this
     */
    public function setDialInNumbers($dial_in_numbers)
    {
        $this->container['dial_in_numbers'] = $dial_in_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


