<?php
/**
 * AccountSettingsInMeeting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * API Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developer@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountSettingsInMeeting Class Doc Comment
 *
 * @category Class
 * @description Account Settings: In Meeting
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountSettingsInMeeting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountSettingsInMeeting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'e2e_encryption' => 'bool',
        'chat' => 'bool',
        'private_chat' => 'bool',
        'auto_saving_chat' => 'bool',
        'file_transfer' => 'bool',
        'feedback' => 'bool',
        'post_meeting_feedback' => 'bool',
        'co_host' => 'bool',
        'polling' => 'bool',
        'attendee_on_hold' => 'bool',
        'show_meeting_control_toolbar' => 'bool',
        'allow_show_zoom_windows' => 'bool',
        'annotation' => 'bool',
        'whiteboard' => 'bool',
        'webinar_question_answer' => 'bool',
        'anonymous_question_answer' => 'bool',
        'breakout_room' => 'bool',
        'closed_caption' => 'bool',
        'far_end_camera_control' => 'bool',
        'group_hd' => 'bool',
        'virtual_background' => 'bool',
        'watermark' => 'bool',
        'alert_guest_join' => 'bool',
        'auto_answer' => 'bool',
        'p2p_connetion' => 'bool',
        'p2p_ports' => 'bool',
        'ports_range' => 'string',
        'sending_default_email_invites' => 'bool',
        'use_html_format_email' => 'bool',
        'dscp_marking' => 'bool',
        'dscp_audio' => 'int',
        'dscp_video' => 'int',
        'stereo_audio' => 'bool',
        'original_audio' => 'bool',
        'screen_sharing' => 'bool',
        'remote_control' => 'bool',
        'attention_tracking' => 'bool',
        'allow_live_streaming' => 'bool',
        'workplace_by_facebook' => 'bool',
        'custom_live_streaming' => 'bool',
        'custom_service_instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'e2e_encryption' => null,
        'chat' => null,
        'private_chat' => null,
        'auto_saving_chat' => null,
        'file_transfer' => null,
        'feedback' => null,
        'post_meeting_feedback' => null,
        'co_host' => null,
        'polling' => null,
        'attendee_on_hold' => null,
        'show_meeting_control_toolbar' => null,
        'allow_show_zoom_windows' => null,
        'annotation' => null,
        'whiteboard' => null,
        'webinar_question_answer' => null,
        'anonymous_question_answer' => null,
        'breakout_room' => null,
        'closed_caption' => null,
        'far_end_camera_control' => null,
        'group_hd' => null,
        'virtual_background' => null,
        'watermark' => null,
        'alert_guest_join' => null,
        'auto_answer' => null,
        'p2p_connetion' => null,
        'p2p_ports' => null,
        'ports_range' => null,
        'sending_default_email_invites' => null,
        'use_html_format_email' => null,
        'dscp_marking' => null,
        'dscp_audio' => null,
        'dscp_video' => null,
        'stereo_audio' => null,
        'original_audio' => null,
        'screen_sharing' => null,
        'remote_control' => null,
        'attention_tracking' => null,
        'allow_live_streaming' => null,
        'workplace_by_facebook' => null,
        'custom_live_streaming' => null,
        'custom_service_instructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'e2e_encryption' => 'e2e_encryption',
        'chat' => 'chat',
        'private_chat' => 'private_chat',
        'auto_saving_chat' => 'auto_saving_chat',
        'file_transfer' => 'file_transfer',
        'feedback' => 'feedback',
        'post_meeting_feedback' => 'post_meeting_feedback',
        'co_host' => 'co_host',
        'polling' => 'polling',
        'attendee_on_hold' => 'attendee_on_hold',
        'show_meeting_control_toolbar' => 'show_meeting_control_toolbar',
        'allow_show_zoom_windows' => 'allow_show_zoom_windows',
        'annotation' => 'annotation',
        'whiteboard' => 'whiteboard',
        'webinar_question_answer' => 'webinar_question_answer',
        'anonymous_question_answer' => 'anonymous_question_answer',
        'breakout_room' => 'breakout_room',
        'closed_caption' => 'closed_caption',
        'far_end_camera_control' => 'far_end_camera_control',
        'group_hd' => 'group_hd',
        'virtual_background' => 'virtual_background',
        'watermark' => 'watermark',
        'alert_guest_join' => 'alert_guest_join',
        'auto_answer' => 'auto_answer',
        'p2p_connetion' => 'p2p_connetion',
        'p2p_ports' => 'p2p_ports',
        'ports_range' => 'ports_range',
        'sending_default_email_invites' => 'sending_default_email_invites',
        'use_html_format_email' => 'use_html_format_email',
        'dscp_marking' => 'dscp_marking',
        'dscp_audio' => 'dscp_audio',
        'dscp_video' => 'dscp_video',
        'stereo_audio' => 'stereo_audio',
        'original_audio' => 'original_audio',
        'screen_sharing' => 'screen_sharing',
        'remote_control' => 'remote_control',
        'attention_tracking' => 'attention_tracking',
        'allow_live_streaming' => 'allow_live_streaming',
        'workplace_by_facebook' => 'workplace_by_facebook',
        'custom_live_streaming' => 'custom_live_streaming',
        'custom_service_instructions' => 'custom_service_instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'e2e_encryption' => 'setE2eEncryption',
        'chat' => 'setChat',
        'private_chat' => 'setPrivateChat',
        'auto_saving_chat' => 'setAutoSavingChat',
        'file_transfer' => 'setFileTransfer',
        'feedback' => 'setFeedback',
        'post_meeting_feedback' => 'setPostMeetingFeedback',
        'co_host' => 'setCoHost',
        'polling' => 'setPolling',
        'attendee_on_hold' => 'setAttendeeOnHold',
        'show_meeting_control_toolbar' => 'setShowMeetingControlToolbar',
        'allow_show_zoom_windows' => 'setAllowShowZoomWindows',
        'annotation' => 'setAnnotation',
        'whiteboard' => 'setWhiteboard',
        'webinar_question_answer' => 'setWebinarQuestionAnswer',
        'anonymous_question_answer' => 'setAnonymousQuestionAnswer',
        'breakout_room' => 'setBreakoutRoom',
        'closed_caption' => 'setClosedCaption',
        'far_end_camera_control' => 'setFarEndCameraControl',
        'group_hd' => 'setGroupHd',
        'virtual_background' => 'setVirtualBackground',
        'watermark' => 'setWatermark',
        'alert_guest_join' => 'setAlertGuestJoin',
        'auto_answer' => 'setAutoAnswer',
        'p2p_connetion' => 'setP2pConnetion',
        'p2p_ports' => 'setP2pPorts',
        'ports_range' => 'setPortsRange',
        'sending_default_email_invites' => 'setSendingDefaultEmailInvites',
        'use_html_format_email' => 'setUseHtmlFormatEmail',
        'dscp_marking' => 'setDscpMarking',
        'dscp_audio' => 'setDscpAudio',
        'dscp_video' => 'setDscpVideo',
        'stereo_audio' => 'setStereoAudio',
        'original_audio' => 'setOriginalAudio',
        'screen_sharing' => 'setScreenSharing',
        'remote_control' => 'setRemoteControl',
        'attention_tracking' => 'setAttentionTracking',
        'allow_live_streaming' => 'setAllowLiveStreaming',
        'workplace_by_facebook' => 'setWorkplaceByFacebook',
        'custom_live_streaming' => 'setCustomLiveStreaming',
        'custom_service_instructions' => 'setCustomServiceInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'e2e_encryption' => 'getE2eEncryption',
        'chat' => 'getChat',
        'private_chat' => 'getPrivateChat',
        'auto_saving_chat' => 'getAutoSavingChat',
        'file_transfer' => 'getFileTransfer',
        'feedback' => 'getFeedback',
        'post_meeting_feedback' => 'getPostMeetingFeedback',
        'co_host' => 'getCoHost',
        'polling' => 'getPolling',
        'attendee_on_hold' => 'getAttendeeOnHold',
        'show_meeting_control_toolbar' => 'getShowMeetingControlToolbar',
        'allow_show_zoom_windows' => 'getAllowShowZoomWindows',
        'annotation' => 'getAnnotation',
        'whiteboard' => 'getWhiteboard',
        'webinar_question_answer' => 'getWebinarQuestionAnswer',
        'anonymous_question_answer' => 'getAnonymousQuestionAnswer',
        'breakout_room' => 'getBreakoutRoom',
        'closed_caption' => 'getClosedCaption',
        'far_end_camera_control' => 'getFarEndCameraControl',
        'group_hd' => 'getGroupHd',
        'virtual_background' => 'getVirtualBackground',
        'watermark' => 'getWatermark',
        'alert_guest_join' => 'getAlertGuestJoin',
        'auto_answer' => 'getAutoAnswer',
        'p2p_connetion' => 'getP2pConnetion',
        'p2p_ports' => 'getP2pPorts',
        'ports_range' => 'getPortsRange',
        'sending_default_email_invites' => 'getSendingDefaultEmailInvites',
        'use_html_format_email' => 'getUseHtmlFormatEmail',
        'dscp_marking' => 'getDscpMarking',
        'dscp_audio' => 'getDscpAudio',
        'dscp_video' => 'getDscpVideo',
        'stereo_audio' => 'getStereoAudio',
        'original_audio' => 'getOriginalAudio',
        'screen_sharing' => 'getScreenSharing',
        'remote_control' => 'getRemoteControl',
        'attention_tracking' => 'getAttentionTracking',
        'allow_live_streaming' => 'getAllowLiveStreaming',
        'workplace_by_facebook' => 'getWorkplaceByFacebook',
        'custom_live_streaming' => 'getCustomLiveStreaming',
        'custom_service_instructions' => 'getCustomServiceInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['e2e_encryption'] = isset($data['e2e_encryption']) ? $data['e2e_encryption'] : null;
        $this->container['chat'] = isset($data['chat']) ? $data['chat'] : null;
        $this->container['private_chat'] = isset($data['private_chat']) ? $data['private_chat'] : null;
        $this->container['auto_saving_chat'] = isset($data['auto_saving_chat']) ? $data['auto_saving_chat'] : null;
        $this->container['file_transfer'] = isset($data['file_transfer']) ? $data['file_transfer'] : null;
        $this->container['feedback'] = isset($data['feedback']) ? $data['feedback'] : null;
        $this->container['post_meeting_feedback'] = isset($data['post_meeting_feedback']) ? $data['post_meeting_feedback'] : null;
        $this->container['co_host'] = isset($data['co_host']) ? $data['co_host'] : null;
        $this->container['polling'] = isset($data['polling']) ? $data['polling'] : null;
        $this->container['attendee_on_hold'] = isset($data['attendee_on_hold']) ? $data['attendee_on_hold'] : null;
        $this->container['show_meeting_control_toolbar'] = isset($data['show_meeting_control_toolbar']) ? $data['show_meeting_control_toolbar'] : null;
        $this->container['allow_show_zoom_windows'] = isset($data['allow_show_zoom_windows']) ? $data['allow_show_zoom_windows'] : null;
        $this->container['annotation'] = isset($data['annotation']) ? $data['annotation'] : null;
        $this->container['whiteboard'] = isset($data['whiteboard']) ? $data['whiteboard'] : null;
        $this->container['webinar_question_answer'] = isset($data['webinar_question_answer']) ? $data['webinar_question_answer'] : null;
        $this->container['anonymous_question_answer'] = isset($data['anonymous_question_answer']) ? $data['anonymous_question_answer'] : null;
        $this->container['breakout_room'] = isset($data['breakout_room']) ? $data['breakout_room'] : null;
        $this->container['closed_caption'] = isset($data['closed_caption']) ? $data['closed_caption'] : null;
        $this->container['far_end_camera_control'] = isset($data['far_end_camera_control']) ? $data['far_end_camera_control'] : null;
        $this->container['group_hd'] = isset($data['group_hd']) ? $data['group_hd'] : null;
        $this->container['virtual_background'] = isset($data['virtual_background']) ? $data['virtual_background'] : null;
        $this->container['watermark'] = isset($data['watermark']) ? $data['watermark'] : null;
        $this->container['alert_guest_join'] = isset($data['alert_guest_join']) ? $data['alert_guest_join'] : null;
        $this->container['auto_answer'] = isset($data['auto_answer']) ? $data['auto_answer'] : null;
        $this->container['p2p_connetion'] = isset($data['p2p_connetion']) ? $data['p2p_connetion'] : null;
        $this->container['p2p_ports'] = isset($data['p2p_ports']) ? $data['p2p_ports'] : null;
        $this->container['ports_range'] = isset($data['ports_range']) ? $data['ports_range'] : '';
        $this->container['sending_default_email_invites'] = isset($data['sending_default_email_invites']) ? $data['sending_default_email_invites'] : null;
        $this->container['use_html_format_email'] = isset($data['use_html_format_email']) ? $data['use_html_format_email'] : null;
        $this->container['dscp_marking'] = isset($data['dscp_marking']) ? $data['dscp_marking'] : null;
        $this->container['dscp_audio'] = isset($data['dscp_audio']) ? $data['dscp_audio'] : null;
        $this->container['dscp_video'] = isset($data['dscp_video']) ? $data['dscp_video'] : null;
        $this->container['stereo_audio'] = isset($data['stereo_audio']) ? $data['stereo_audio'] : null;
        $this->container['original_audio'] = isset($data['original_audio']) ? $data['original_audio'] : null;
        $this->container['screen_sharing'] = isset($data['screen_sharing']) ? $data['screen_sharing'] : null;
        $this->container['remote_control'] = isset($data['remote_control']) ? $data['remote_control'] : null;
        $this->container['attention_tracking'] = isset($data['attention_tracking']) ? $data['attention_tracking'] : null;
        $this->container['allow_live_streaming'] = isset($data['allow_live_streaming']) ? $data['allow_live_streaming'] : null;
        $this->container['workplace_by_facebook'] = isset($data['workplace_by_facebook']) ? $data['workplace_by_facebook'] : null;
        $this->container['custom_live_streaming'] = isset($data['custom_live_streaming']) ? $data['custom_live_streaming'] : null;
        $this->container['custom_service_instructions'] = isset($data['custom_service_instructions']) ? $data['custom_service_instructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['dscp_audio']) && ($this->container['dscp_audio'] > 63)) {
            $invalidProperties[] = "invalid value for 'dscp_audio', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dscp_audio']) && ($this->container['dscp_audio'] < 1)) {
            $invalidProperties[] = "invalid value for 'dscp_audio', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dscp_video']) && ($this->container['dscp_video'] > 63)) {
            $invalidProperties[] = "invalid value for 'dscp_video', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['dscp_video']) && ($this->container['dscp_video'] < 1)) {
            $invalidProperties[] = "invalid value for 'dscp_video', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets e2e_encryption
     *
     * @return bool
     */
    public function getE2eEncryption()
    {
        return $this->container['e2e_encryption'];
    }

    /**
     * Sets e2e_encryption
     *
     * @param bool $e2e_encryption Require that all meetings are encrypted using AES
     *
     * @return $this
     */
    public function setE2eEncryption($e2e_encryption)
    {
        $this->container['e2e_encryption'] = $e2e_encryption;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return bool
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param bool $chat Allow meeting participants to send a message visible to all participants
     *
     * @return $this
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets private_chat
     *
     * @return bool
     */
    public function getPrivateChat()
    {
        return $this->container['private_chat'];
    }

    /**
     * Sets private_chat
     *
     * @param bool $private_chat Allow meeting participants to send a private 1:1 message to another participants
     *
     * @return $this
     */
    public function setPrivateChat($private_chat)
    {
        $this->container['private_chat'] = $private_chat;

        return $this;
    }

    /**
     * Gets auto_saving_chat
     *
     * @return bool
     */
    public function getAutoSavingChat()
    {
        return $this->container['auto_saving_chat'];
    }

    /**
     * Sets auto_saving_chat
     *
     * @param bool $auto_saving_chat Automatically save all in-meeting chats so that hosts do not need to manually save the text of the chat after the meeting starts
     *
     * @return $this
     */
    public function setAutoSavingChat($auto_saving_chat)
    {
        $this->container['auto_saving_chat'] = $auto_saving_chat;

        return $this;
    }

    /**
     * Gets file_transfer
     *
     * @return bool
     */
    public function getFileTransfer()
    {
        return $this->container['file_transfer'];
    }

    /**
     * Sets file_transfer
     *
     * @param bool $file_transfer Hosts and participants can send files through the in-meeting chat
     *
     * @return $this
     */
    public function setFileTransfer($file_transfer)
    {
        $this->container['file_transfer'] = $file_transfer;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return bool
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param bool $feedback Add a Feedback tab to the Windows Settings or Mac Preferences dialog, and also enable users to provide feedback to Zoom at the end of the meeting
     *
     * @return $this
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets post_meeting_feedback
     *
     * @return bool
     */
    public function getPostMeetingFeedback()
    {
        return $this->container['post_meeting_feedback'];
    }

    /**
     * Sets post_meeting_feedback
     *
     * @param bool $post_meeting_feedback Display a thumbs up/down survey at the end of each meeting
     *
     * @return $this
     */
    public function setPostMeetingFeedback($post_meeting_feedback)
    {
        $this->container['post_meeting_feedback'] = $post_meeting_feedback;

        return $this;
    }

    /**
     * Gets co_host
     *
     * @return bool
     */
    public function getCoHost()
    {
        return $this->container['co_host'];
    }

    /**
     * Sets co_host
     *
     * @param bool $co_host Allow the host to add co-hosts
     *
     * @return $this
     */
    public function setCoHost($co_host)
    {
        $this->container['co_host'] = $co_host;

        return $this;
    }

    /**
     * Gets polling
     *
     * @return bool
     */
    public function getPolling()
    {
        return $this->container['polling'];
    }

    /**
     * Sets polling
     *
     * @param bool $polling Add 'Polls' to the meeting controls.
     *
     * @return $this
     */
    public function setPolling($polling)
    {
        $this->container['polling'] = $polling;

        return $this;
    }

    /**
     * Gets attendee_on_hold
     *
     * @return bool
     */
    public function getAttendeeOnHold()
    {
        return $this->container['attendee_on_hold'];
    }

    /**
     * Sets attendee_on_hold
     *
     * @param bool $attendee_on_hold Allow hosts to temporarily remove an attendee from the meeting
     *
     * @return $this
     */
    public function setAttendeeOnHold($attendee_on_hold)
    {
        $this->container['attendee_on_hold'] = $attendee_on_hold;

        return $this;
    }

    /**
     * Gets show_meeting_control_toolbar
     *
     * @return bool
     */
    public function getShowMeetingControlToolbar()
    {
        return $this->container['show_meeting_control_toolbar'];
    }

    /**
     * Sets show_meeting_control_toolbar
     *
     * @param bool $show_meeting_control_toolbar Always show meeting control toolbar
     *
     * @return $this
     */
    public function setShowMeetingControlToolbar($show_meeting_control_toolbar)
    {
        $this->container['show_meeting_control_toolbar'] = $show_meeting_control_toolbar;

        return $this;
    }

    /**
     * Gets allow_show_zoom_windows
     *
     * @return bool
     */
    public function getAllowShowZoomWindows()
    {
        return $this->container['allow_show_zoom_windows'];
    }

    /**
     * Sets allow_show_zoom_windows
     *
     * @param bool $allow_show_zoom_windows Show Zoom Desktop application when sharing screen
     *
     * @return $this
     */
    public function setAllowShowZoomWindows($allow_show_zoom_windows)
    {
        $this->container['allow_show_zoom_windows'] = $allow_show_zoom_windows;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return bool
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param bool $annotation Allow participants to use annotation tools to add information to shared screens
     *
     * @return $this
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }

    /**
     * Gets whiteboard
     *
     * @return bool
     */
    public function getWhiteboard()
    {
        return $this->container['whiteboard'];
    }

    /**
     * Sets whiteboard
     *
     * @param bool $whiteboard Allow participants to share a whiteboard that includes annotation tools
     *
     * @return $this
     */
    public function setWhiteboard($whiteboard)
    {
        $this->container['whiteboard'] = $whiteboard;

        return $this;
    }

    /**
     * Gets webinar_question_answer
     *
     * @return bool
     */
    public function getWebinarQuestionAnswer()
    {
        return $this->container['webinar_question_answer'];
    }

    /**
     * Sets webinar_question_answer
     *
     * @param bool $webinar_question_answer Q&A in webinar
     *
     * @return $this
     */
    public function setWebinarQuestionAnswer($webinar_question_answer)
    {
        $this->container['webinar_question_answer'] = $webinar_question_answer;

        return $this;
    }

    /**
     * Gets anonymous_question_answer
     *
     * @return bool
     */
    public function getAnonymousQuestionAnswer()
    {
        return $this->container['anonymous_question_answer'];
    }

    /**
     * Sets anonymous_question_answer
     *
     * @param bool $anonymous_question_answer Allow Anonymous Q&A in Webinar
     *
     * @return $this
     */
    public function setAnonymousQuestionAnswer($anonymous_question_answer)
    {
        $this->container['anonymous_question_answer'] = $anonymous_question_answer;

        return $this;
    }

    /**
     * Gets breakout_room
     *
     * @return bool
     */
    public function getBreakoutRoom()
    {
        return $this->container['breakout_room'];
    }

    /**
     * Sets breakout_room
     *
     * @param bool $breakout_room Allow host to split meeting participants into separate, smaller rooms
     *
     * @return $this
     */
    public function setBreakoutRoom($breakout_room)
    {
        $this->container['breakout_room'] = $breakout_room;

        return $this;
    }

    /**
     * Gets closed_caption
     *
     * @return bool
     */
    public function getClosedCaption()
    {
        return $this->container['closed_caption'];
    }

    /**
     * Sets closed_caption
     *
     * @param bool $closed_caption Allow host to type closed captions or assign a participant/third party device to add closed captions
     *
     * @return $this
     */
    public function setClosedCaption($closed_caption)
    {
        $this->container['closed_caption'] = $closed_caption;

        return $this;
    }

    /**
     * Gets far_end_camera_control
     *
     * @return bool
     */
    public function getFarEndCameraControl()
    {
        return $this->container['far_end_camera_control'];
    }

    /**
     * Sets far_end_camera_control
     *
     * @param bool $far_end_camera_control Allow another user to take control of your camera during a meeting
     *
     * @return $this
     */
    public function setFarEndCameraControl($far_end_camera_control)
    {
        $this->container['far_end_camera_control'] = $far_end_camera_control;

        return $this;
    }

    /**
     * Gets group_hd
     *
     * @return bool
     */
    public function getGroupHd()
    {
        return $this->container['group_hd'];
    }

    /**
     * Sets group_hd
     *
     * @param bool $group_hd Activate higher quality video for host and participants. (This will use more bandwidth.)
     *
     * @return $this
     */
    public function setGroupHd($group_hd)
    {
        $this->container['group_hd'] = $group_hd;

        return $this;
    }

    /**
     * Gets virtual_background
     *
     * @return bool
     */
    public function getVirtualBackground()
    {
        return $this->container['virtual_background'];
    }

    /**
     * Sets virtual_background
     *
     * @param bool $virtual_background Allow users to replace their background with any selected image. Choose or upload an image in the Zoom Desktop application settings.
     *
     * @return $this
     */
    public function setVirtualBackground($virtual_background)
    {
        $this->container['virtual_background'] = $virtual_background;

        return $this;
    }

    /**
     * Gets watermark
     *
     * @return bool
     */
    public function getWatermark()
    {
        return $this->container['watermark'];
    }

    /**
     * Sets watermark
     *
     * @param bool $watermark Add watermark when viewing shared screen
     *
     * @return $this
     */
    public function setWatermark($watermark)
    {
        $this->container['watermark'] = $watermark;

        return $this;
    }

    /**
     * Gets alert_guest_join
     *
     * @return bool
     */
    public function getAlertGuestJoin()
    {
        return $this->container['alert_guest_join'];
    }

    /**
     * Sets alert_guest_join
     *
     * @param bool $alert_guest_join Identify guest participants in the meeting/webinar
     *
     * @return $this
     */
    public function setAlertGuestJoin($alert_guest_join)
    {
        $this->container['alert_guest_join'] = $alert_guest_join;

        return $this;
    }

    /**
     * Gets auto_answer
     *
     * @return bool
     */
    public function getAutoAnswer()
    {
        return $this->container['auto_answer'];
    }

    /**
     * Sets auto_answer
     *
     * @param bool $auto_answer Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
     *
     * @return $this
     */
    public function setAutoAnswer($auto_answer)
    {
        $this->container['auto_answer'] = $auto_answer;

        return $this;
    }

    /**
     * Gets p2p_connetion
     *
     * @return bool
     */
    public function getP2pConnetion()
    {
        return $this->container['p2p_connetion'];
    }

    /**
     * Sets p2p_connetion
     *
     * @param bool $p2p_connetion Peer to Peer connection while only 2 people are in a meeting
     *
     * @return $this
     */
    public function setP2pConnetion($p2p_connetion)
    {
        $this->container['p2p_connetion'] = $p2p_connetion;

        return $this;
    }

    /**
     * Gets p2p_ports
     *
     * @return bool
     */
    public function getP2pPorts()
    {
        return $this->container['p2p_ports'];
    }

    /**
     * Sets p2p_ports
     *
     * @param bool $p2p_ports P2P listening ports range
     *
     * @return $this
     */
    public function setP2pPorts($p2p_ports)
    {
        $this->container['p2p_ports'] = $p2p_ports;

        return $this;
    }

    /**
     * Gets ports_range
     *
     * @return string
     */
    public function getPortsRange()
    {
        return $this->container['ports_range'];
    }

    /**
     * Sets ports_range
     *
     * @param string $ports_range Listening ports range, separated by comma (ex 55,56). The ports range must be between 1 to 65535.
     *
     * @return $this
     */
    public function setPortsRange($ports_range)
    {
        $this->container['ports_range'] = $ports_range;

        return $this;
    }

    /**
     * Gets sending_default_email_invites
     *
     * @return bool
     */
    public function getSendingDefaultEmailInvites()
    {
        return $this->container['sending_default_email_invites'];
    }

    /**
     * Sets sending_default_email_invites
     *
     * @param bool $sending_default_email_invites Only show default email when sending email invites
     *
     * @return $this
     */
    public function setSendingDefaultEmailInvites($sending_default_email_invites)
    {
        $this->container['sending_default_email_invites'] = $sending_default_email_invites;

        return $this;
    }

    /**
     * Gets use_html_format_email
     *
     * @return bool
     */
    public function getUseHtmlFormatEmail()
    {
        return $this->container['use_html_format_email'];
    }

    /**
     * Sets use_html_format_email
     *
     * @param bool $use_html_format_email Use HTML format email for Outlook plugin
     *
     * @return $this
     */
    public function setUseHtmlFormatEmail($use_html_format_email)
    {
        $this->container['use_html_format_email'] = $use_html_format_email;

        return $this;
    }

    /**
     * Gets dscp_marking
     *
     * @return bool
     */
    public function getDscpMarking()
    {
        return $this->container['dscp_marking'];
    }

    /**
     * Sets dscp_marking
     *
     * @param bool $dscp_marking DSCP marking
     *
     * @return $this
     */
    public function setDscpMarking($dscp_marking)
    {
        $this->container['dscp_marking'] = $dscp_marking;

        return $this;
    }

    /**
     * Gets dscp_audio
     *
     * @return int
     */
    public function getDscpAudio()
    {
        return $this->container['dscp_audio'];
    }

    /**
     * Sets dscp_audio
     *
     * @param int $dscp_audio DSCP Audio
     *
     * @return $this
     */
    public function setDscpAudio($dscp_audio)
    {

        if (!is_null($dscp_audio) && ($dscp_audio > 63)) {
            throw new \InvalidArgumentException('invalid value for $dscp_audio when calling AccountSettingsInMeeting., must be smaller than or equal to 63.');
        }
        if (!is_null($dscp_audio) && ($dscp_audio < 1)) {
            throw new \InvalidArgumentException('invalid value for $dscp_audio when calling AccountSettingsInMeeting., must be bigger than or equal to 1.');
        }

        $this->container['dscp_audio'] = $dscp_audio;

        return $this;
    }

    /**
     * Gets dscp_video
     *
     * @return int
     */
    public function getDscpVideo()
    {
        return $this->container['dscp_video'];
    }

    /**
     * Sets dscp_video
     *
     * @param int $dscp_video DSCP Video
     *
     * @return $this
     */
    public function setDscpVideo($dscp_video)
    {

        if (!is_null($dscp_video) && ($dscp_video > 63)) {
            throw new \InvalidArgumentException('invalid value for $dscp_video when calling AccountSettingsInMeeting., must be smaller than or equal to 63.');
        }
        if (!is_null($dscp_video) && ($dscp_video < 1)) {
            throw new \InvalidArgumentException('invalid value for $dscp_video when calling AccountSettingsInMeeting., must be bigger than or equal to 1.');
        }

        $this->container['dscp_video'] = $dscp_video;

        return $this;
    }

    /**
     * Gets stereo_audio
     *
     * @return bool
     */
    public function getStereoAudio()
    {
        return $this->container['stereo_audio'];
    }

    /**
     * Sets stereo_audio
     *
     * @param bool $stereo_audio Allow users to select stereo audio in their client settings
     *
     * @return $this
     */
    public function setStereoAudio($stereo_audio)
    {
        $this->container['stereo_audio'] = $stereo_audio;

        return $this;
    }

    /**
     * Gets original_audio
     *
     * @return bool
     */
    public function getOriginalAudio()
    {
        return $this->container['original_audio'];
    }

    /**
     * Sets original_audio
     *
     * @param bool $original_audio Allow users to select original sound in their client settings
     *
     * @return $this
     */
    public function setOriginalAudio($original_audio)
    {
        $this->container['original_audio'] = $original_audio;

        return $this;
    }

    /**
     * Gets screen_sharing
     *
     * @return bool
     */
    public function getScreenSharing()
    {
        return $this->container['screen_sharing'];
    }

    /**
     * Sets screen_sharing
     *
     * @param bool $screen_sharing Allow screen sharing
     *
     * @return $this
     */
    public function setScreenSharing($screen_sharing)
    {
        $this->container['screen_sharing'] = $screen_sharing;

        return $this;
    }

    /**
     * Gets remote_control
     *
     * @return bool
     */
    public function getRemoteControl()
    {
        return $this->container['remote_control'];
    }

    /**
     * Sets remote_control
     *
     * @param bool $remote_control Allow users to request remote control
     *
     * @return $this
     */
    public function setRemoteControl($remote_control)
    {
        $this->container['remote_control'] = $remote_control;

        return $this;
    }

    /**
     * Gets attention_tracking
     *
     * @return bool
     */
    public function getAttentionTracking()
    {
        return $this->container['attention_tracking'];
    }

    /**
     * Sets attention_tracking
     *
     * @param bool $attention_tracking Lets the host see an indicator in the participant panel if a meeting/webinar attendee does not have Zoom in focus during screen sharing
     *
     * @return $this
     */
    public function setAttentionTracking($attention_tracking)
    {
        $this->container['attention_tracking'] = $attention_tracking;

        return $this;
    }

    /**
     * Gets allow_live_streaming
     *
     * @return bool
     */
    public function getAllowLiveStreaming()
    {
        return $this->container['allow_live_streaming'];
    }

    /**
     * Sets allow_live_streaming
     *
     * @param bool $allow_live_streaming Allow live streaming
     *
     * @return $this
     */
    public function setAllowLiveStreaming($allow_live_streaming)
    {
        $this->container['allow_live_streaming'] = $allow_live_streaming;

        return $this;
    }

    /**
     * Gets workplace_by_facebook
     *
     * @return bool
     */
    public function getWorkplaceByFacebook()
    {
        return $this->container['workplace_by_facebook'];
    }

    /**
     * Sets workplace_by_facebook
     *
     * @param bool $workplace_by_facebook Workplace by facebook
     *
     * @return $this
     */
    public function setWorkplaceByFacebook($workplace_by_facebook)
    {
        $this->container['workplace_by_facebook'] = $workplace_by_facebook;

        return $this;
    }

    /**
     * Gets custom_live_streaming
     *
     * @return bool
     */
    public function getCustomLiveStreaming()
    {
        return $this->container['custom_live_streaming'];
    }

    /**
     * Sets custom_live_streaming
     *
     * @param bool $custom_live_streaming Custom live streaming
     *
     * @return $this
     */
    public function setCustomLiveStreaming($custom_live_streaming)
    {
        $this->container['custom_live_streaming'] = $custom_live_streaming;

        return $this;
    }

    /**
     * Gets custom_service_instructions
     *
     * @return string
     */
    public function getCustomServiceInstructions()
    {
        return $this->container['custom_service_instructions'];
    }

    /**
     * Sets custom_service_instructions
     *
     * @param string $custom_service_instructions Custom service instructions
     *
     * @return $this
     */
    public function setCustomServiceInstructions($custom_service_instructions)
    {
        $this->container['custom_service_instructions'] = $custom_service_instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


