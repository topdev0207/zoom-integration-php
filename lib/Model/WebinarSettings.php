<?php
/**
 * WebinarSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * API Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developer@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WebinarSettings Class Doc Comment
 *
 * @category Class
 * @description Webinar Settings
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebinarSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebinarSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'host_video' => 'bool',
        'panelists_video' => 'bool',
        'practice_session' => 'bool',
        'hd_video' => 'bool',
        'approval_type' => 'int',
        'registration_type' => 'int',
        'audio' => 'string',
        'auto_recording' => 'string',
        'enforce_login' => 'bool',
        'enforce_login_domains' => 'string',
        'alternative_hosts' => 'string',
        'close_registration' => 'bool',
        'show_share_button' => 'bool',
        'allow_multiple_devices' => 'bool',
        'on_demand' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'host_video' => null,
        'panelists_video' => null,
        'practice_session' => null,
        'hd_video' => null,
        'approval_type' => null,
        'registration_type' => null,
        'audio' => null,
        'auto_recording' => null,
        'enforce_login' => null,
        'enforce_login_domains' => null,
        'alternative_hosts' => null,
        'close_registration' => null,
        'show_share_button' => null,
        'allow_multiple_devices' => null,
        'on_demand' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_video' => 'host_video',
        'panelists_video' => 'panelists_video',
        'practice_session' => 'practice_session',
        'hd_video' => 'hd_video',
        'approval_type' => 'approval_type',
        'registration_type' => 'registration_type',
        'audio' => 'audio',
        'auto_recording' => 'auto_recording',
        'enforce_login' => 'enforce_login',
        'enforce_login_domains' => 'enforce_login_domains',
        'alternative_hosts' => 'alternative_hosts',
        'close_registration' => 'close_registration',
        'show_share_button' => 'show_share_button',
        'allow_multiple_devices' => 'allow_multiple_devices',
        'on_demand' => 'on_demand'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_video' => 'setHostVideo',
        'panelists_video' => 'setPanelistsVideo',
        'practice_session' => 'setPracticeSession',
        'hd_video' => 'setHdVideo',
        'approval_type' => 'setApprovalType',
        'registration_type' => 'setRegistrationType',
        'audio' => 'setAudio',
        'auto_recording' => 'setAutoRecording',
        'enforce_login' => 'setEnforceLogin',
        'enforce_login_domains' => 'setEnforceLoginDomains',
        'alternative_hosts' => 'setAlternativeHosts',
        'close_registration' => 'setCloseRegistration',
        'show_share_button' => 'setShowShareButton',
        'allow_multiple_devices' => 'setAllowMultipleDevices',
        'on_demand' => 'setOnDemand'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_video' => 'getHostVideo',
        'panelists_video' => 'getPanelistsVideo',
        'practice_session' => 'getPracticeSession',
        'hd_video' => 'getHdVideo',
        'approval_type' => 'getApprovalType',
        'registration_type' => 'getRegistrationType',
        'audio' => 'getAudio',
        'auto_recording' => 'getAutoRecording',
        'enforce_login' => 'getEnforceLogin',
        'enforce_login_domains' => 'getEnforceLoginDomains',
        'alternative_hosts' => 'getAlternativeHosts',
        'close_registration' => 'getCloseRegistration',
        'show_share_button' => 'getShowShareButton',
        'allow_multiple_devices' => 'getAllowMultipleDevices',
        'on_demand' => 'getOnDemand'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUDIO_BOTH = 'both';
    const AUDIO_TELEPHONY = 'telephony';
    const AUDIO_VOIP = 'voip';
    const AUTO_RECORDING_LOCAL = 'local';
    const AUTO_RECORDING_CLOUD = 'cloud';
    const AUTO_RECORDING_NONE = 'none';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAudioAllowableValues()
    {
        return [
            self::AUDIO_BOTH,
            self::AUDIO_TELEPHONY,
            self::AUDIO_VOIP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoRecordingAllowableValues()
    {
        return [
            self::AUTO_RECORDING_LOCAL,
            self::AUTO_RECORDING_CLOUD,
            self::AUTO_RECORDING_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host_video'] = isset($data['host_video']) ? $data['host_video'] : null;
        $this->container['panelists_video'] = isset($data['panelists_video']) ? $data['panelists_video'] : null;
        $this->container['practice_session'] = isset($data['practice_session']) ? $data['practice_session'] : false;
        $this->container['hd_video'] = isset($data['hd_video']) ? $data['hd_video'] : false;
        $this->container['approval_type'] = isset($data['approval_type']) ? $data['approval_type'] : null;
        $this->container['registration_type'] = isset($data['registration_type']) ? $data['registration_type'] : null;
        $this->container['audio'] = isset($data['audio']) ? $data['audio'] : 'both';
        $this->container['auto_recording'] = isset($data['auto_recording']) ? $data['auto_recording'] : 'none';
        $this->container['enforce_login'] = isset($data['enforce_login']) ? $data['enforce_login'] : null;
        $this->container['enforce_login_domains'] = isset($data['enforce_login_domains']) ? $data['enforce_login_domains'] : null;
        $this->container['alternative_hosts'] = isset($data['alternative_hosts']) ? $data['alternative_hosts'] : null;
        $this->container['close_registration'] = isset($data['close_registration']) ? $data['close_registration'] : null;
        $this->container['show_share_button'] = isset($data['show_share_button']) ? $data['show_share_button'] : null;
        $this->container['allow_multiple_devices'] = isset($data['allow_multiple_devices']) ? $data['allow_multiple_devices'] : null;
        $this->container['on_demand'] = isset($data['on_demand']) ? $data['on_demand'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAudioAllowableValues();
        if (!is_null($this->container['audio']) && !in_array($this->container['audio'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'audio', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoRecordingAllowableValues();
        if (!is_null($this->container['auto_recording']) && !in_array($this->container['auto_recording'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'auto_recording', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host_video
     *
     * @return bool
     */
    public function getHostVideo()
    {
        return $this->container['host_video'];
    }

    /**
     * Sets host_video
     *
     * @param bool $host_video Start video when host joins webinar
     *
     * @return $this
     */
    public function setHostVideo($host_video)
    {
        $this->container['host_video'] = $host_video;

        return $this;
    }

    /**
     * Gets panelists_video
     *
     * @return bool
     */
    public function getPanelistsVideo()
    {
        return $this->container['panelists_video'];
    }

    /**
     * Sets panelists_video
     *
     * @param bool $panelists_video Start video when panelists join webinar
     *
     * @return $this
     */
    public function setPanelistsVideo($panelists_video)
    {
        $this->container['panelists_video'] = $panelists_video;

        return $this;
    }

    /**
     * Gets practice_session
     *
     * @return bool
     */
    public function getPracticeSession()
    {
        return $this->container['practice_session'];
    }

    /**
     * Sets practice_session
     *
     * @param bool $practice_session Enable Practice Session
     *
     * @return $this
     */
    public function setPracticeSession($practice_session)
    {
        $this->container['practice_session'] = $practice_session;

        return $this;
    }

    /**
     * Gets hd_video
     *
     * @return bool
     */
    public function getHdVideo()
    {
        return $this->container['hd_video'];
    }

    /**
     * Sets hd_video
     *
     * @param bool $hd_video Default to HD Video
     *
     * @return $this
     */
    public function setHdVideo($hd_video)
    {
        $this->container['hd_video'] = $hd_video;

        return $this;
    }

    /**
     * Gets approval_type
     *
     * @return int
     */
    public function getApprovalType()
    {
        return $this->container['approval_type'];
    }

    /**
     * Sets approval_type
     *
     * @param int $approval_type approval_type
     *
     * @return $this
     */
    public function setApprovalType($approval_type)
    {
        $this->container['approval_type'] = $approval_type;

        return $this;
    }

    /**
     * Gets registration_type
     *
     * @return int
     */
    public function getRegistrationType()
    {
        return $this->container['registration_type'];
    }

    /**
     * Sets registration_type
     *
     * @param int $registration_type Registration type. Used for recurring webinar with fixed time only.
     *
     * @return $this
     */
    public function setRegistrationType($registration_type)
    {
        $this->container['registration_type'] = $registration_type;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return string
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param string $audio Determine how participants can join the audio portion of the meeting
     *
     * @return $this
     */
    public function setAudio($audio)
    {
        $allowedValues = $this->getAudioAllowableValues();
        if (!is_null($audio) && !in_array($audio, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'audio', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets auto_recording
     *
     * @return string
     */
    public function getAutoRecording()
    {
        return $this->container['auto_recording'];
    }

    /**
     * Sets auto_recording
     *
     * @param string $auto_recording auto_recording
     *
     * @return $this
     */
    public function setAutoRecording($auto_recording)
    {
        $allowedValues = $this->getAutoRecordingAllowableValues();
        if (!is_null($auto_recording) && !in_array($auto_recording, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'auto_recording', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_recording'] = $auto_recording;

        return $this;
    }

    /**
     * Gets enforce_login
     *
     * @return bool
     */
    public function getEnforceLogin()
    {
        return $this->container['enforce_login'];
    }

    /**
     * Sets enforce_login
     *
     * @param bool $enforce_login Only signed-in users can join this meeting
     *
     * @return $this
     */
    public function setEnforceLogin($enforce_login)
    {
        $this->container['enforce_login'] = $enforce_login;

        return $this;
    }

    /**
     * Gets enforce_login_domains
     *
     * @return string
     */
    public function getEnforceLoginDomains()
    {
        return $this->container['enforce_login_domains'];
    }

    /**
     * Sets enforce_login_domains
     *
     * @param string $enforce_login_domains Only signed-in users with specified domains can join meetings
     *
     * @return $this
     */
    public function setEnforceLoginDomains($enforce_login_domains)
    {
        $this->container['enforce_login_domains'] = $enforce_login_domains;

        return $this;
    }

    /**
     * Gets alternative_hosts
     *
     * @return string
     */
    public function getAlternativeHosts()
    {
        return $this->container['alternative_hosts'];
    }

    /**
     * Sets alternative_hosts
     *
     * @param string $alternative_hosts Alternative hosts emails or IDs. Multiple values separated by comma.
     *
     * @return $this
     */
    public function setAlternativeHosts($alternative_hosts)
    {
        $this->container['alternative_hosts'] = $alternative_hosts;

        return $this;
    }

    /**
     * Gets close_registration
     *
     * @return bool
     */
    public function getCloseRegistration()
    {
        return $this->container['close_registration'];
    }

    /**
     * Sets close_registration
     *
     * @param bool $close_registration Close registration after event date
     *
     * @return $this
     */
    public function setCloseRegistration($close_registration)
    {
        $this->container['close_registration'] = $close_registration;

        return $this;
    }

    /**
     * Gets show_share_button
     *
     * @return bool
     */
    public function getShowShareButton()
    {
        return $this->container['show_share_button'];
    }

    /**
     * Sets show_share_button
     *
     * @param bool $show_share_button Show social share buttons on registration page
     *
     * @return $this
     */
    public function setShowShareButton($show_share_button)
    {
        $this->container['show_share_button'] = $show_share_button;

        return $this;
    }

    /**
     * Gets allow_multiple_devices
     *
     * @return bool
     */
    public function getAllowMultipleDevices()
    {
        return $this->container['allow_multiple_devices'];
    }

    /**
     * Sets allow_multiple_devices
     *
     * @param bool $allow_multiple_devices Allow attendees to join from multiple devices
     *
     * @return $this
     */
    public function setAllowMultipleDevices($allow_multiple_devices)
    {
        $this->container['allow_multiple_devices'] = $allow_multiple_devices;

        return $this;
    }

    /**
     * Gets on_demand
     *
     * @return bool
     */
    public function getOnDemand()
    {
        return $this->container['on_demand'];
    }

    /**
     * Sets on_demand
     *
     * @param bool $on_demand Make the webinar on-demand
     *
     * @return $this
     */
    public function setOnDemand($on_demand)
    {
        $this->container['on_demand'] = $on_demand;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


