<?php
/**
 * Recording
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * API Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developer@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Recording Class Doc Comment
 *
 * @category Class
 * @description Recording file Object
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Recording implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Recording';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'meeting_id' => 'string',
        'recording_start' => 'string',
        'recording_end' => 'string',
        'file_type' => 'string',
        'file_size' => 'float',
        'play_url' => 'string',
        'download_url' => 'string',
        'status' => 'string',
        'deleted_time' => 'string',
        'recording_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'meeting_id' => null,
        'recording_start' => null,
        'recording_end' => null,
        'file_type' => null,
        'file_size' => null,
        'play_url' => null,
        'download_url' => null,
        'status' => null,
        'deleted_time' => null,
        'recording_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'meeting_id' => 'meeting_id',
        'recording_start' => 'recording_start',
        'recording_end' => 'recording_end',
        'file_type' => 'file_type',
        'file_size' => 'file_size',
        'play_url' => 'play_url',
        'download_url' => 'download_url',
        'status' => 'status',
        'deleted_time' => 'deleted_time',
        'recording_type' => 'recording_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'meeting_id' => 'setMeetingId',
        'recording_start' => 'setRecordingStart',
        'recording_end' => 'setRecordingEnd',
        'file_type' => 'setFileType',
        'file_size' => 'setFileSize',
        'play_url' => 'setPlayUrl',
        'download_url' => 'setDownloadUrl',
        'status' => 'setStatus',
        'deleted_time' => 'setDeletedTime',
        'recording_type' => 'setRecordingType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'meeting_id' => 'getMeetingId',
        'recording_start' => 'getRecordingStart',
        'recording_end' => 'getRecordingEnd',
        'file_type' => 'getFileType',
        'file_size' => 'getFileSize',
        'play_url' => 'getPlayUrl',
        'download_url' => 'getDownloadUrl',
        'status' => 'getStatus',
        'deleted_time' => 'getDeletedTime',
        'recording_type' => 'getRecordingType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['meeting_id'] = isset($data['meeting_id']) ? $data['meeting_id'] : null;
        $this->container['recording_start'] = isset($data['recording_start']) ? $data['recording_start'] : null;
        $this->container['recording_end'] = isset($data['recording_end']) ? $data['recording_end'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['play_url'] = isset($data['play_url']) ? $data['play_url'] : null;
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['deleted_time'] = isset($data['deleted_time']) ? $data['deleted_time'] : null;
        $this->container['recording_type'] = isset($data['recording_type']) ? $data['recording_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The recording file ID.Response in general query.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets meeting_id
     *
     * @return string
     */
    public function getMeetingId()
    {
        return $this->container['meeting_id'];
    }

    /**
     * Sets meeting_id
     *
     * @param string $meeting_id The meeting ID.
     *
     * @return $this
     */
    public function setMeetingId($meeting_id)
    {
        $this->container['meeting_id'] = $meeting_id;

        return $this;
    }

    /**
     * Gets recording_start
     *
     * @return string
     */
    public function getRecordingStart()
    {
        return $this->container['recording_start'];
    }

    /**
     * Sets recording_start
     *
     * @param string $recording_start The recording start time.
     *
     * @return $this
     */
    public function setRecordingStart($recording_start)
    {
        $this->container['recording_start'] = $recording_start;

        return $this;
    }

    /**
     * Gets recording_end
     *
     * @return string
     */
    public function getRecordingEnd()
    {
        return $this->container['recording_end'];
    }

    /**
     * Sets recording_end
     *
     * @param string $recording_end The recording end time. Response in general query.
     *
     * @return $this
     */
    public function setRecordingEnd($recording_end)
    {
        $this->container['recording_end'] = $recording_end;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type The recording file type.
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return float
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param float $file_size The recording file size.
     *
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets play_url
     *
     * @return string
     */
    public function getPlayUrl()
    {
        return $this->container['play_url'];
    }

    /**
     * Sets play_url
     *
     * @param string $play_url The recording file play url. Response in general query.
     *
     * @return $this
     */
    public function setPlayUrl($play_url)
    {
        $this->container['play_url'] = $play_url;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url The recording download url. Response in general query.
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The recording status. Response in general query.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time The recording delete time. Response in trash query.
     *
     * @return $this
     */
    public function setDeletedTime($deleted_time)
    {
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets recording_type
     *
     * @return string
     */
    public function getRecordingType()
    {
        return $this->container['recording_type'];
    }

    /**
     * Sets recording_type
     *
     * @param string $recording_type The recording file type.
     *
     * @return $this
     */
    public function setRecordingType($recording_type)
    {
        $this->container['recording_type'] = $recording_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


