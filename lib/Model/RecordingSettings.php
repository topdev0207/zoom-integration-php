<?php
/**
 * RecordingSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * API Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developer@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RecordingSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordingSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecordingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'share_recording' => 'string',
        'viewer_download' => 'bool',
        'password' => 'string',
        'on_demand' => 'bool',
        'approval_type' => 'int',
        'send_email_to_host' => 'bool',
        'show_social_share_buttons' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'share_recording' => null,
        'viewer_download' => null,
        'password' => null,
        'on_demand' => null,
        'approval_type' => null,
        'send_email_to_host' => null,
        'show_social_share_buttons' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'share_recording' => 'share_recording',
        'viewer_download' => 'viewer_download',
        'password' => 'password',
        'on_demand' => 'on_demand',
        'approval_type' => 'approval_type',
        'send_email_to_host' => 'send_email_to_host',
        'show_social_share_buttons' => 'show_social_share_buttons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'share_recording' => 'setShareRecording',
        'viewer_download' => 'setViewerDownload',
        'password' => 'setPassword',
        'on_demand' => 'setOnDemand',
        'approval_type' => 'setApprovalType',
        'send_email_to_host' => 'setSendEmailToHost',
        'show_social_share_buttons' => 'setShowSocialShareButtons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'share_recording' => 'getShareRecording',
        'viewer_download' => 'getViewerDownload',
        'password' => 'getPassword',
        'on_demand' => 'getOnDemand',
        'approval_type' => 'getApprovalType',
        'send_email_to_host' => 'getSendEmailToHost',
        'show_social_share_buttons' => 'getShowSocialShareButtons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHARE_RECORDING_PUBLICLY = 'publicly';
    const SHARE_RECORDING_INTERNALLY = 'internally';
    const SHARE_RECORDING_NONE = 'none';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShareRecordingAllowableValues()
    {
        return [
            self::SHARE_RECORDING_PUBLICLY,
            self::SHARE_RECORDING_INTERNALLY,
            self::SHARE_RECORDING_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['share_recording'] = isset($data['share_recording']) ? $data['share_recording'] : null;
        $this->container['viewer_download'] = isset($data['viewer_download']) ? $data['viewer_download'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['on_demand'] = isset($data['on_demand']) ? $data['on_demand'] : null;
        $this->container['approval_type'] = isset($data['approval_type']) ? $data['approval_type'] : null;
        $this->container['send_email_to_host'] = isset($data['send_email_to_host']) ? $data['send_email_to_host'] : null;
        $this->container['show_social_share_buttons'] = isset($data['show_social_share_buttons']) ? $data['show_social_share_buttons'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShareRecordingAllowableValues();
        if (!is_null($this->container['share_recording']) && !in_array($this->container['share_recording'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'share_recording', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets share_recording
     *
     * @return string
     */
    public function getShareRecording()
    {
        return $this->container['share_recording'];
    }

    /**
     * Sets share_recording
     *
     * @param string $share_recording Determine if the meeting recording is shared
     *
     * @return $this
     */
    public function setShareRecording($share_recording)
    {
        $allowedValues = $this->getShareRecordingAllowableValues();
        if (!is_null($share_recording) && !in_array($share_recording, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'share_recording', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['share_recording'] = $share_recording;

        return $this;
    }

    /**
     * Gets viewer_download
     *
     * @return bool
     */
    public function getViewerDownload()
    {
        return $this->container['viewer_download'];
    }

    /**
     * Sets viewer_download
     *
     * @param bool $viewer_download Host video
     *
     * @return $this
     */
    public function setViewerDownload($viewer_download)
    {
        $this->container['viewer_download'] = $viewer_download;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password protect
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets on_demand
     *
     * @return bool
     */
    public function getOnDemand()
    {
        return $this->container['on_demand'];
    }

    /**
     * Sets on_demand
     *
     * @param bool $on_demand Registration required
     *
     * @return $this
     */
    public function setOnDemand($on_demand)
    {
        $this->container['on_demand'] = $on_demand;

        return $this;
    }

    /**
     * Gets approval_type
     *
     * @return int
     */
    public function getApprovalType()
    {
        return $this->container['approval_type'];
    }

    /**
     * Sets approval_type
     *
     * @param int $approval_type Approval type
     *
     * @return $this
     */
    public function setApprovalType($approval_type)
    {
        $this->container['approval_type'] = $approval_type;

        return $this;
    }

    /**
     * Gets send_email_to_host
     *
     * @return bool
     */
    public function getSendEmailToHost()
    {
        return $this->container['send_email_to_host'];
    }

    /**
     * Sets send_email_to_host
     *
     * @param bool $send_email_to_host Send an email to host when someone registers
     *
     * @return $this
     */
    public function setSendEmailToHost($send_email_to_host)
    {
        $this->container['send_email_to_host'] = $send_email_to_host;

        return $this;
    }

    /**
     * Gets show_social_share_buttons
     *
     * @return bool
     */
    public function getShowSocialShareButtons()
    {
        return $this->container['show_social_share_buttons'];
    }

    /**
     * Sets show_social_share_buttons
     *
     * @param bool $show_social_share_buttons Show social share buttons on registration page
     *
     * @return $this
     */
    public function setShowSocialShareButtons($show_social_share_buttons)
    {
        $this->container['show_social_share_buttons'] = $show_social_share_buttons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


